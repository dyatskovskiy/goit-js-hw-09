{"mappings":"gfAAAA,EAAA,S,WAGA,IAAMC,EAAYC,SAASC,cAAc,kBACnCC,EAAkBF,SAASC,cAAc,qBACzCE,EAAiBH,SAASC,cAAc,oBACxCG,EAAcJ,SAASC,cAAc,sBAIrCI,EAAaH,EAAgBI,MAEnCP,EAAUQ,iBAAiB,SAAS,SAAAC,GAClCA,EAAEC,iBACaL,EAAYE,MAA3B,IACMI,EAAQP,EAAeG,MAE7BK,YAAW,WACTA,YAAW,WACTC,EAAcC,SAAUH,GACrBI,MAAK,SAAAC,G,IAAGC,EAAQD,EAARF,SAAUI,EAAKF,EAALE,MACjBC,QAAQC,IAAI,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAE3DI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARF,SAAUI,EAAKF,EAALE,MAClBC,QAAQC,IAAI,sBAAuCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,MAE5DP,E,GACFL,E,IAGL,IAAMO,EAAgB,SAACC,EAAUI,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3Bb,YAAW,WACac,KAAKC,SAAW,IAGpCH,EAAQ,CAAEV,WAAUI,UAGtBO,EAAO,CAAEX,WAAUI,S,GAClBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-notify-aio-3.2.6.min.js';\n\nconst createBtn = document.querySelector('.form > button');\nconst firstDelayInput = document.querySelector('input[name=delay]');\nconst delayStepInput = document.querySelector('input[name=step]');\nconst amountInput = document.querySelector('input[name=amount]');\n\n// const position = amountInput.value;\n// const delay = delayStepInput.value;\nconst firstDelay = firstDelayInput.value;\n\ncreateBtn.addEventListener('click', e => {\n  e.preventDefault();\n  const amount = amountInput.value;\n  const delay = delayStepInput.value;\n\n  setTimeout(() => {\n    setTimeout(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }, delay);\n  }, firstDelay);\n});\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n};\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["parcelRequire","$ce04d3a99e08e73b$var$createBtn","document","querySelector","$ce04d3a99e08e73b$var$firstDelayInput","$ce04d3a99e08e73b$var$delayStepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$firstDelay","value","addEventListener","e","preventDefault","delay1","setTimeout","$ce04d3a99e08e73b$var$createPromise","position","then","param","_$position","delay","console","log","concat","catch","Promise","resolve","reject","Math","random"],"version":3,"file":"03-promises.b0525f96.js.map"}