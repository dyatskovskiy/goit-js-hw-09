{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,WAGA,MAAMC,EAAYC,SAASC,cAAc,kBACnCC,EAAkBF,SAASC,cAAc,qBACzCE,EAAiBH,SAASC,cAAc,oBACxCG,EAAcJ,SAASC,cAAc,sBAE3CF,EAAUM,iBAAiB,SAASC,IAClCA,EAAEC,iBAEF,MAAMC,EAASC,SAASL,EAAYM,OAC9BC,EAAYF,SAASN,EAAeO,OACpCE,EAAaH,SAASP,EAAgBQ,OAE5C,IAAK,IAAIG,EAAW,EAAGA,GAAYL,EAAQK,IAAY,CACrD,IAAIC,EAAQH,EAAYE,EAExBE,YAAW,KACTC,EAAcH,EAAUC,GACrBG,MAAK,EAACC,SAAEA,EAAQC,MAAEA,MACjBtB,EAAAuB,OAAOC,QAAQ,uBAAqBH,QAAiBC,MAAU,IAEhEG,OAAM,EAACJ,SAAEA,EAAQC,MAAEA,MAClBtB,EAAAuB,OAAOG,QAAQ,sBAAoBL,QAAiBC,MAAU,GAC9D,GACHP,E,KAIP,MAAMI,EAAgB,CAACE,EAAUC,IACxB,IAAIK,SAAQ,CAACC,EAASC,KAC3BX,YAAW,KACaY,KAAKC,SAAW,IAGpCH,EAAQ,C,SAAEP,E,MAAUC,IAGtBO,EAAO,C,SAAER,E,MAAUC,GAAQ,GAC1BA,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-notify-aio-3.2.6.min.js';\n\nconst createBtn = document.querySelector('.form > button');\nconst firstDelayInput = document.querySelector('input[name=delay]');\nconst delayStepInput = document.querySelector('input[name=step]');\nconst amountInput = document.querySelector('input[name=amount]');\n\ncreateBtn.addEventListener('click', e => {\n  e.preventDefault();\n\n  const amount = parseInt(amountInput.value);\n  const delayStep = parseInt(delayStepInput.value);\n  const firstDelay = parseInt(firstDelayInput.value);\n\n  for (let position = 1; position <= amount; position++) {\n    let delay = delayStep * position;\n\n    setTimeout(() => {\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }, firstDelay);\n  }\n});\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n\n      reject({ position, delay });\n    }, delay);\n  });\n};\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createBtn","document","querySelector","$47d4ff9957288465$var$firstDelayInput","$47d4ff9957288465$var$delayStepInput","$47d4ff9957288465$var$amountInput","addEventListener","e","preventDefault","amount","parseInt","value","delayStep","firstDelay","position1","delay1","setTimeout","$47d4ff9957288465$var$createPromise","then","position","delay","Notify","success","catch","failure","Promise","resolve","reject","Math","random"],"version":3,"file":"03-promises.8fc55786.js.map"}